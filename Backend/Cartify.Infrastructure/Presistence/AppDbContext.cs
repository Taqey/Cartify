// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Cartify.Core.Models;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<LkpAttribute> LkpAttributes { get; set; }

    public virtual DbSet<LkpAttributesProduct> LkpAttributesProducts { get; set; }

    public virtual DbSet<LkpOrderStatue> LkpOrderStatues { get; set; }

    public virtual DbSet<LkpPaymentType> LkpPaymentTypes { get; set; }

    public virtual DbSet<LkpShipementMethod> LkpShipementMethods { get; set; }

    public virtual DbSet<LkpUnitMeasuresAttribute> LkpUnitMeasuresAttributes { get; set; }

    public virtual DbSet<LkpUnitOfMeasure> LkpUnitOfMeasures { get; set; }

    public virtual DbSet<TblAddress> TblAddresses { get; set; }

    public virtual DbSet<TblCategory> TblCategories { get; set; }

    public virtual DbSet<TblInventory> TblInventories { get; set; }

    public virtual DbSet<TblOrder> TblOrders { get; set; }

    public virtual DbSet<TblOrderDetail> TblOrderDetails { get; set; }

    public virtual DbSet<TblProduct> TblProducts { get; set; }

    public virtual DbSet<TblProductDetail> TblProductDetails { get; set; }

    public virtual DbSet<TblProductImage> TblProductImages { get; set; }

    public virtual DbSet<TblProductsDetail> TblProductsDetails { get; set; }

    public virtual DbSet<TblRefund> TblRefunds { get; set; }

    public virtual DbSet<TblReview> TblReviews { get; set; }

    public virtual DbSet<TblType> TblTypes { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    public virtual DbSet<TblUserStore> TblUserStores { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<LkpAttribute>(entity =>
        {
            entity.HasKey(e => e.AttributeId);

            entity.ToTable("lkpAttributes");

            entity.Property(e => e.AttributeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_lkpAttributes_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_lkpAttributes_IsDeleted_1");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LkpAttributesProduct>(entity =>
        {
            entity.HasKey(e => e.AttributeProductId);

            entity.Property(e => e.AttributeProductId).ValueGeneratedNever();
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpAttributesProducts_IsDeleted");

            entity.HasOne(d => d.Attripute).WithMany(p => p.LkpAttributesProducts)
                .HasForeignKey(d => d.AttriputeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpAttributesProducts_lkpAttributes");

            entity.HasOne(d => d.Product).WithMany(p => p.LkpAttributesProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpAttributesProducts_TblProducts");
        });

        modelBuilder.Entity<LkpOrderStatue>(entity =>
        {
            entity.HasKey(e => e.OrderStatuesId);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpOrderStatues_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpOrderStatues_IsDeleted_1");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LkpPaymentType>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK_TblPayment");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpPaymentTypes_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpPaymentTypes_IsDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LkpShipementMethod>(entity =>
        {
            entity.HasKey(e => e.ShipementMethodId);

            entity.Property(e => e.ShipementMethodId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpShipementMethods_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Fees).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpShipementMethods_IsDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LkpUnitMeasuresAttribute>(entity =>
        {
            entity.HasKey(e => e.UnitMeasureAttributeId);

            entity.Property(e => e.UnitMeasureAttributeId).ValueGeneratedNever();
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasuresAttributes_IsDeleted1");

            entity.HasOne(d => d.Attribute).WithMany(p => p.LkpUnitMeasuresAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpUnitOfMeasuresAttributes_lkpAttributes");

            entity.HasOne(d => d.UnitOfMeasure).WithMany(p => p.LkpUnitMeasuresAttributes)
                .HasForeignKey(d => d.UnitOfMeasureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpUnitOfMeasuresAttributes_LkpUnitOfMeasures");
        });

        modelBuilder.Entity<LkpUnitOfMeasure>(entity =>
        {
            entity.HasKey(e => e.UnitOfMeasureId);

            entity.Property(e => e.UnitOfMeasureId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasures_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasures_IsDeleted");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TblAddress>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_TblAdresses_1");

            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_IsDefault");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_IsDeleted_1");
            entity.Property(e => e.PostalCode).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.TblAddresses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TblAdresses_TblUsers");
        });

        modelBuilder.Entity<TblCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.Property(e => e.CategoryId).ValueGeneratedNever();
            entity.Property(e => e.CategoryDescription).IsRequired();
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblCategories_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblCategories_IsDeleted_1");
        });

        modelBuilder.Entity<TblInventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId);

            entity.ToTable("TblInventory");

            entity.Property(e => e.InventoryId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblInventory_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblInventory_IsDeleted_1");

            entity.HasOne(d => d.ProductDetail).WithMany(p => p.TblInventories)
                .HasForeignKey(d => d.ProductDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblInventory_TblProductDetails");

            entity.HasOne(d => d.ProductDetailNavigation).WithMany(p => p.TblInventories)
                .HasForeignKey(d => d.ProductDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblInventory_TblProductsDetails");
        });

        modelBuilder.Entity<TblOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId);

            entity.Property(e => e.OrderId).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.GrantTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_IsDeleted_1");
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_OrderDate")
                .HasColumnType("datetime");
            entity.Property(e => e.Tax).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.TotalDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.OrderStatues).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.OrderStatuesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpOrderStatues");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpPaymentTypes");

            entity.HasOne(d => d.ShipmentMethod).WithMany(p => p.TblOrders)
                .HasForeignKey(d => d.ShipmentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpShipementMethods");
        });

        modelBuilder.Entity<TblOrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrderDetails_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrderDetails_IsDeleted_1");
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.TblOrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblOrders");

            entity.HasOne(d => d.Product).WithMany(p => p.TblOrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblProducts");
        });

        modelBuilder.Entity<TblProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblProducts_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblProducts_IsDeleted_1");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Type).WithMany(p => p.TblProducts)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblTypes");

            entity.HasOne(d => d.UserStore).WithMany(p => p.TblProducts)
                .HasForeignKey(d => d.UserStoreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblUserStore1");
        });

        modelBuilder.Entity<TblProductDetail>(entity =>
        {
            entity.HasKey(e => e.ProductDetailId);

            entity.Property(e => e.ProductDetailId).ValueGeneratedNever();
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AttributeProduct).WithMany(p => p.TblProductDetails)
                .HasForeignKey(d => d.AttributeProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductDetails_LkpAttributesProducts");

            entity.HasOne(d => d.UnitMeasureAttribute).WithMany(p => p.TblProductDetails)
                .HasForeignKey(d => d.UnitMeasureAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductDetails_LkpUnitMeasuresAttributes");
        });

        modelBuilder.Entity<TblProductImage>(entity =>
        {
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ImageURL");

            entity.HasOne(d => d.Product).WithMany(p => p.TblProductImages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductImages_TblProducts");
        });

        modelBuilder.Entity<TblProductsDetail>(entity =>
        {
            entity.HasKey(e => e.ProductDetailId);

            entity.Property(e => e.ProductDetailId).ValueGeneratedNever();
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductId).HasColumnName("productId");

            entity.HasOne(d => d.ProductDetail).WithOne(p => p.TblProductsDetail)
                .HasForeignKey<TblProductsDetail>(d => d.ProductDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductsDetails_TblProducts");

            entity.HasOne(d => d.UnitMeasureAttribute).WithMany(p => p.TblProductsDetails)
                .HasForeignKey(d => d.UnitMeasureAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductsDetails_LkpUnitMeasuresAttributes");
        });

        modelBuilder.Entity<TblRefund>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblRefunds_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblRefunds_IsDeleted_1");
            entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RefundStatues)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.OrderDetail).WithMany()
                .HasForeignKey(d => d.OrderDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblRefunds_TblOrderDetails");
        });

        modelBuilder.Entity<TblReview>(entity =>
        {
            entity.HasKey(e => e.ReviewId);

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblReviews_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblReviews_IsDeleted_1");
            entity.Property(e => e.ReviewText).HasMaxLength(500);

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.TblReviews)
                .HasForeignKey(d => d.OrderDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblReviews_TblOrderDetails");
        });

        modelBuilder.Entity<TblType>(entity =>
        {
            entity.HasKey(e => e.TypeId);

            entity.Property(e => e.TypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblTypes_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblTypes_IsDeleted_1");
            entity.Property(e => e.TypeDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.TblTypes)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblTypes_TblCategories");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.BackupMobile)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_IsDeleted_1");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mobile");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermisionLevel).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UserTypeId)
                .HasDefaultValue(1)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_UserTypeId");

            entity.HasOne(d => d.UserType).WithMany(p => p.TblUsers)
                .HasForeignKey(d => d.UserTypeId)
                .HasConstraintName("FK_TblUsers_UserType");
        });

        modelBuilder.Entity<TblUserStore>(entity =>
        {
            entity.HasKey(e => e.UserStorId);

            entity.ToTable("TblUserStore");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUserStore_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblUserStore_IsDeleted");
            entity.Property(e => e.StoreName).HasMaxLength(50);

            entity.HasOne(d => d.Inventory).WithMany(p => p.TblUserStores)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblUserStore_TblInventory");

            entity.HasOne(d => d.User).WithMany(p => p.TblUserStores)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblUserStore_TblUsers");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.ToTable("UserType");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_UserType_CreatedDate")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_UserType_IsDeleted_1");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}