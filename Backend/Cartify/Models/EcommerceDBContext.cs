// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Backend.Models;

public partial class EcommerceDBContext : DbContext
{
    public EcommerceDBContext()
    {
    }

    public EcommerceDBContext(DbContextOptions<EcommerceDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<LkpAttribute> LkpAttributes { get; set; }

    public virtual DbSet<LkpOrderStatue> LkpOrderStatues { get; set; }

    public virtual DbSet<LkpPaymentType> LkpPaymentTypes { get; set; }

    public virtual DbSet<LkpShipementMethod> LkpShipementMethods { get; set; }

    public virtual DbSet<LkpUnitOfMeasure> LkpUnitOfMeasures { get; set; }

    public virtual DbSet<LkpUnitOfMeasuresAttribute> LkpUnitOfMeasuresAttributes { get; set; }

    public virtual DbSet<TblAdress> TblAdresses { get; set; }

    public virtual DbSet<TblCategory> TblCategories { get; set; }

    public virtual DbSet<TblInventory> TblInventories { get; set; }

    public virtual DbSet<TblOrder> TblOrders { get; set; }

    public virtual DbSet<TblOrderDetail> TblOrderDetails { get; set; }

    public virtual DbSet<TblProduct> TblProducts { get; set; }

    public virtual DbSet<TblProductImage> TblProductImages { get; set; }

    public virtual DbSet<TblRefund> TblRefunds { get; set; }

    public virtual DbSet<TblReview> TblReviews { get; set; }

    public virtual DbSet<TblType> TblTypes { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    public virtual DbSet<TblUserStore> TblUserStores { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=EcommerceDB;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<LkpAttribute>(entity =>
        {
            entity.Property(e => e.AttributeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_lkpAttributes_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_lkpAttributes_IsDeleted_1");
        });

        modelBuilder.Entity<LkpOrderStatue>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpOrderStatues_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpOrderStatues_IsDeleted_1");
        });

        modelBuilder.Entity<LkpPaymentType>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK_TblPayment");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpPaymentTypes_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpPaymentTypes_IsDeleted");
        });

        modelBuilder.Entity<LkpShipementMethod>(entity =>
        {
            entity.Property(e => e.ShipementMethodId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpShipementMethods_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpShipementMethods_IsDeleted");
        });

        modelBuilder.Entity<LkpUnitOfMeasure>(entity =>
        {
            entity.Property(e => e.UnitOfMeasureId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasures_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasures_IsDeleted");
        });

        modelBuilder.Entity<LkpUnitOfMeasuresAttribute>(entity =>
        {
            entity.HasKey(e => e.UnitOfMeasurementAttributeId).HasName("PK_LkpUnitOfMeasuresAttributes_1");

            entity.Property(e => e.UnitOfMeasurementAttributeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate1)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasuresAttributes_CreatedDate1");
            entity.Property(e => e.IsDeleted1).HasAnnotation("Relational:DefaultConstraintName", "DF_LkpUnitOfMeasuresAttributes_IsDeleted1");

            entity.HasOne(d => d.Attribute).WithMany(p => p.LkpUnitOfMeasuresAttributes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpUnitOfMeasuresAttributes_lkpAttributes");

            entity.HasOne(d => d.UnitOfMeasure).WithMany(p => p.LkpUnitOfMeasuresAttributes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LkpUnitOfMeasuresAttributes_LkpUnitOfMeasures");
        });

        modelBuilder.Entity<TblAdress>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_TblAdresses_1");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_CreatedDate");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_IsDefault");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblAdresses_IsDeleted_1");

            entity.HasOne(d => d.User).WithMany(p => p.TblAdresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblAdresses_TblUsers");
        });

        modelBuilder.Entity<TblCategory>(entity =>
        {
            entity.Property(e => e.CategoryId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblCategories_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblCategories_IsDeleted_1");
        });

        modelBuilder.Entity<TblInventory>(entity =>
        {
            entity.Property(e => e.InventoryId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblInventory_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblInventory_IsDeleted_1");

            entity.HasOne(d => d.Product).WithMany(p => p.TblInventories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblInventory_TblProducts");
        });

        modelBuilder.Entity<TblOrder>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_IsDeleted_1");
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrders_OrderDate");

            entity.HasOne(d => d.OrderStatues).WithMany(p => p.TblOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpOrderStatues");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.TblOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpPaymentTypes");

            entity.HasOne(d => d.ShipmentMethod).WithMany(p => p.TblOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrders_LkpShipementMethods");
        });

        modelBuilder.Entity<TblOrderDetail>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrderDetails_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblOrderDetails_IsDeleted_1");

            entity.HasOne(d => d.Order).WithMany(p => p.TblOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblOrders");

            entity.HasOne(d => d.Product).WithMany(p => p.TblOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblOrderProducts_TblProducts");
        });

        modelBuilder.Entity<TblProduct>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblProducts_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblProducts_IsDeleted_1");

            entity.HasOne(d => d.Attribute).WithMany(p => p.TblProducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_lkpAttributes");

            entity.HasOne(d => d.Type).WithMany(p => p.TblProducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblTypes");

            entity.HasOne(d => d.UserStore).WithMany(p => p.TblProducts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProducts_TblUserStore1");
        });

        modelBuilder.Entity<TblProductImage>(entity =>
        {
            entity.HasOne(d => d.Product).WithMany(p => p.TblProductImages)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblProductImages_TblProducts");
        });

        modelBuilder.Entity<TblRefund>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblRefunds_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblRefunds_IsDeleted_1");

            entity.HasOne(d => d.OrderDetail).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblRefunds_TblOrderDetails");
        });

        modelBuilder.Entity<TblReview>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblReviews_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblReviews_IsDeleted_1");

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.TblReviews)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblReviews_TblOrderDetails");
        });

        modelBuilder.Entity<TblType>(entity =>
        {
            entity.Property(e => e.TypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblTypes_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblTypes_IsDeleted_1");

            entity.HasOne(d => d.Category).WithMany(p => p.TblTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblTypes_TblCategories");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_IsDeleted_1");
            entity.Property(e => e.UserTypeId)
                .HasDefaultValue(1)
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUsers_UserTypeId");

            entity.HasOne(d => d.UserType).WithMany(p => p.TblUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblUsers_UserType");
        });

        modelBuilder.Entity<TblUserStore>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_TblUserStore_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_TblUserStore_IsDeleted");

            entity.HasOne(d => d.User).WithMany(p => p.TblUserStores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TblUserStore_TblUsers");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasAnnotation("Relational:DefaultConstraintName", "DF_UserType_CreatedDate");
            entity.Property(e => e.IsDeleted).HasAnnotation("Relational:DefaultConstraintName", "DF_UserType_IsDeleted_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}